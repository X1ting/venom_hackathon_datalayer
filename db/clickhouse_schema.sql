### EVERSCALE

CREATE TABLE default.ton_blocks
(
    `id` String,
    `file_hash` String,
    `status` UInt8,
    `boc` String,
    `global_id` UInt32,
    `version` UInt16,
    `after_merge` Boolean,
    `before_split` Boolean,
    `after_split` Boolean,
    `want_split` Boolean,
    `want_merge` Boolean,
    `key_block` Boolean,
    `vert_seqno_incr` UInt32,
    `seq_no` UInt32,
    `vert_seq_no` UInt32,
    `gen_utime` DateTime,
    `start_lt_dec` String,
    `start_lt` String,
    `end_lt_dec` String,
    `end_lt` String,
    `gen_validator_list_hash_short` UInt32,
    `gen_catchain_seqno` UInt32,
    `min_ref_mc_seqno` UInt32,
    `prev_key_block_seqno` UInt32,
    `workchain_id` Int8,
    `shard` String,
    `gen_software_version` UInt16,
    `gen_software_capabilities_dec` String,
    `gen_software_capabilities` String,
    `prev_seq_no` UInt32,
    `master_ref_end_lt_dec` String,
    `master_ref_end_lt` String,
    `master_ref_seq_no` UInt32,
    `master_ref_root_hash` String,
    `master_ref_file_hash` String,
    `prev_ref_end_lt_dec` String,
    `prev_ref_end_lt` String,
    `prev_ref_seq_no` UInt32,
    `prev_ref_root_hash` String,
    `prev_ref_file_hash` String,
    `value_flow_from_prev_blk_dec` String,
    `value_flow_from_prev_blk` String,
    `value_flow_to_next_blk_dec` String,
    `value_flow_to_next_blk` String,
    `value_flow_imported_dec` String,
    `value_flow_imported` String,
    `value_flow_exported_dec` String,
    `value_flow_exported` String,
    `value_flow_fees_collected_dec` String,
    `value_flow_fees_collected` String,
    `value_flow_fees_imported_dec` String,
    `value_flow_fees_imported` String,
    `value_flow_recovered_dec` String,
    `value_flow_recovered` String,
    `value_flow_created_dec` String,
    `value_flow_created` String,
    `value_flow_minted_dec` String,
    `value_flow_minted` String,
    `old_hash` String,
    `new_hash` String,
    `old_depth` UInt32,
    `new_depth` UInt32,
    `in_msg_descr` Array(String),
    `out_msg_descr` Array(String),
    `tr_count` UInt16,
    `rand_seed` String,
    `created_by` String,
    `created_at_local` DateTime64(3)
)
ENGINE = MergeTree
ORDER BY (id, toStartOfHour(gen_utime), gen_utime)
PRIMARY KEY (id, toStartOfHour(gen_utime))
PARTITION BY toYYYYMM(gen_utime)
SETTINGS index_granularity = 8192

SET allow_experimental_object_type=1

CREATE TABLE default.ton_blocks_queue
(
    `id` String,
    `file_hash` String,
    `status` UInt8,
    `boc` String,
    `global_id` UInt32,
    `version` UInt16,
    `after_merge` Boolean,
    `before_split` Boolean,
    `after_split` Boolean,
    `want_split` Boolean,
    `want_merge` Boolean,
    `key_block` Boolean,
    `vert_seqno_incr` UInt32,
    `seq_no` UInt32,
    `vert_seq_no` UInt32,
    `gen_utime` DateTime,
    `start_lt_dec` String,
    `start_lt` String,
    `end_lt_dec` String,
    `end_lt` String,
    `gen_validator_list_hash_short` UInt32,
    `gen_catchain_seqno` UInt32,
    `min_ref_mc_seqno` UInt32,
    `prev_key_block_seqno` UInt32,
    `workchain_id` Int8,
    `shard` String,
    `gen_software_version` UInt16,
    `gen_software_capabilities_dec` String,
    `gen_software_capabilities` String,
    `prev_seq_no` UInt32,
    `master_ref` String,
    `prev_ref` String,
    `value_flow` String,
    `old_hash` String,
    `new_hash` String,
    `old_depth` UInt32,
    `new_depth` UInt32,
    `in_msg_descr` Array(String),
    `out_msg_descr` Array(String),
    `tr_count` UInt16,
    `rand_seed` String,
    `created_by` String,
    `created_at_local` DateTime64(3)
)
ENGINE = Kafka('10.0.0.3:9094', 'gql.blocks', 'clickhouse-ton', 'JSONEachRow')
SETTINGS kafka_thread_per_consumer = 2, kafka_num_consumers = 2


CREATE MATERIALIZED VIEW default.ton_blocks_mv TO default.ton_blocks
(
    `id` String,
    `file_hash` String,
    `status` UInt8,
    `boc` String,
    `global_id` UInt32,
    `version` UInt16,
    `after_merge` Boolean,
    `before_split` Boolean,
    `after_split` Boolean,
    `want_split` Boolean,
    `want_merge` Boolean,
    `key_block` Boolean,
    `vert_seqno_incr` UInt32,
    `seq_no` UInt32,
    `vert_seq_no` UInt32,
    `gen_utime` DateTime,
    `start_lt_dec` String,
    `start_lt` String,
    `end_lt_dec` String,
    `end_lt` String,
    `gen_validator_list_hash_short` UInt32,
    `gen_catchain_seqno` UInt32,
    `min_ref_mc_seqno` UInt32,
    `prev_key_block_seqno` UInt32,
    `workchain_id` Int8,
    `shard` String,
    `gen_software_version` UInt16,
    `gen_software_capabilities_dec` String,
    `gen_software_capabilities` String,
    `prev_seq_no` UInt32,
    `master_ref-end_lt_dec` String,
    `master_ref-end_lt` String,
    `master_ref-seq_no` UInt32,
    `master_ref-root_hash` String,
    `master_ref-file_hash` String,
    `prev_ref-end_lt_dec` String,
    `prev_ref-end_lt` String,
    `prev_ref-seq_no` UInt32,
    `prev_ref-root_hash` String,
    `prev_ref-file_hash` String,
    `value_flow-from_prev_blk_dec` String,
    `value_flow-from_prev_blk` String,
    `value_flow-to_next_blk_dec` String,
    `value_flow-to_next_blk` String,
    `value_flow-imported_dec` String,
    `value_flow-imported` String,
    `value_flow-exported_dec` String,
    `value_flow-exported` String,
    `value_flow-fees_collected_dec` String,
    `value_flow-fees_collected` String,
    `value_flow-fees_imported_dec` String,
    `value_flow-fees_imported` String,
    `value_flow-recovered_dec` String,
    `value_flow-recovered` String,
    `value_flow-created_dec` String,
    `value_flow-created` String,
    `value_flow-minted_dec` String,
    `value_flow-minted` String,
    `old_hash` String,
    `new_hash` String,
    `old_depth` UInt32,
    `new_depth` UInt32,
    `in_msg_descr` Array(String),
    `out_msg_descr` Array(String),
    `tr_count` UInt16,
    `rand_seed` String,
    `created_by` String,
    `created_at_local` DateTime64(3)
) AS
SELECT
    id,
    file_hash,
    status,
    boc,
    global_id,
    version,
    after_merge,
    before_split,
    after_split,
    want_split,
    want_merge,
    key_block,
    vert_seqno_incr,
    seq_no,
    vert_seq_no,
    gen_utime,
    start_lt_dec,
    start_lt,
    end_lt_dec,
    end_lt,
    gen_validator_list_hash_short,
    gen_catchain_seqno,
    min_ref_mc_seqno,
    prev_key_block_seqno,
    workchain_id,
    shard,
    gen_software_version,
    gen_software_capabilities_dec,
    gen_software_capabilities,
    prev_seq_no,
    JSONExtractString(master_ref, 'end_lt_dec') AS master_ref_end_lt_dec,
    JSONExtractString(master_ref, 'end_lt') AS master_ref_end_lt,
    JSONExtractUInt(master_ref, 'seq_no') AS master_ref_seq_no,
    JSONExtractString(master_ref, 'root_hash') AS master_ref_root_hash,
    JSONExtractString(master_ref, 'file_hash') AS master_ref_file_hash,
    JSONExtractString(prev_ref, 'end_lt_dec') AS prev_ref_end_lt_dec,
    JSONExtractString(prev_ref, 'end_lt') AS prev_ref_end_lt,
    JSONExtractUInt(prev_ref, 'seq_no') AS prev_ref_seq_no,
    JSONExtractString(prev_ref, 'root_hash') AS prev_ref_root_hash,
    JSONExtractString(prev_ref, 'file_hash') AS prev_ref_file_hash,
    JSONExtractString(value_flow, 'from_prev_blk_dec') AS value_flow_from_prev_blk_dec,
    JSONExtractString(value_flow, 'from_prev_blk') AS value_flow_from_prev_blk,
    JSONExtractString(value_flow, 'to_next_blk_dec') AS value_flow_to_next_blk_dec,
    JSONExtractString(value_flow, 'to_next_blk') AS value_flow_to_next_blk,
    JSONExtractString(value_flow, 'imported_dec') AS value_flow_imported_dec,
    JSONExtractString(value_flow, 'imported') AS value_flow_imported,
    JSONExtractString(value_flow, 'exported_dec') AS value_flow_exported_dec,
    JSONExtractString(value_flow, 'exported') AS value_flow_exported,
    JSONExtractString(value_flow, 'fees_collected_dec') AS value_flow_fees_collected_dec,
    JSONExtractString(value_flow, 'fees_collected') AS value_flow_fees_collected,
    JSONExtractString(value_flow, 'fees_imported_dec') AS value_flow_fees_imported_dec,
    JSONExtractString(value_flow, 'fees_imported') AS value_flow_fees_imported,
    JSONExtractString(value_flow, 'recovered_dec') AS value_flow_recovered_dec,
    JSONExtractString(value_flow, 'recovered') AS value_flow_recovered,
    JSONExtractString(value_flow, 'created_dec') AS value_flow_created_dec,
    JSONExtractString(value_flow, 'created') AS value_flow_created,
    JSONExtractString(value_flow, 'minted_dec') AS value_flow_minted_dec,
    JSONExtractString(value_flow, 'minted') AS value_flow_minted,
    old_hash,
    new_hash,
    old_depth,
    new_depth,
    in_msg_descr,
    out_msg_descr,
    tr_count,
    rand_seed,
    created_by,
    NOW64() AS created_at_local
FROM default.ton_blocks_queue

### ACCOUNTS

CREATE TABLE default.ton_accounts
(
    id String,
    workchain_id Int32,
    boc String,
    last_paid Int64,
    bits_dec String,
    bits String,
    cells_dec String,
    cells String,
    public_cells_dec String,
    public_cells String,
    last_trans_lt_dec String,
    last_trans_lt String,
    balance_dec String,
    balance String,
    tick Boolean,
    tock Boolean,
    code String,
    code_hash String,
    data String,
    data_hash String,
    library String,
    library_hash String,
    acc_type Int32,
    created_at_local DateTime64(3)
)
ENGINE = MergeTree
ORDER BY (id, toStartOfHour(created_at_local))
PRIMARY KEY (id, toStartOfHour(created_at_local))
PARTITION BY toYYYYMM(created_at_local)
SETTINGS index_granularity = 8192


CREATE TABLE default.ton_accounts_queue
(
    id String,
    workchain_id Int32,
    boc String,
    last_paid Int64,
    bits_dec String,
    bits String,
    cells_dec String,
    cells String,
    public_cells_dec String,
    public_cells String,
    last_trans_lt_dec String,
    last_trans_lt String,
    balance_dec String,
    balance String,
    tick Boolean,
    tock Boolean,
    code String,
    code_hash String,
    data String,
    data_hash String,
    library String,
    library_hash String,
    acc_type Int32
)
ENGINE = Kafka('10.0.0.3:9094', 'gql.accounts', 'clickhouse-ton', 'JSONEachRow')
SETTINGS kafka_thread_per_consumer = 2, kafka_num_consumers = 2


CREATE MATERIALIZED VIEW default.ton_accounts_mv TO default.ton_accounts
(
    id String,
    workchain_id Int32,
    boc String,
    last_paid Int64,
    bits_dec String,
    bits String,
    cells_dec String,
    cells String,
    public_cells_dec String,
    public_cells String,
    last_trans_lt_dec String,
    last_trans_lt String,
    balance_dec String,
    balance String,
    tick Boolean,
    tock Boolean,
    code String,
    code_hash String,
    data String,
    data_hash String,
    library String,
    library_hash String,
    acc_type Int32,
    created_at_local DateTime64(3)
) AS
SELECT
    *,
    NOW64() AS created_at_local
FROM default.ton_accounts_queue


### Messages
CREATE TABLE default.ton_messages
(
    id String,
    transaction_id String,
    boc String,
    status UInt8,
    msg_type UInt8,
    src String,
    src_workchain_id Int16,
    dst String,
    dst_workchain_id Int16,
    ihr_disabled Boolean,
    ihr_fee_dec String,
    ihr_fee String,
    fwd_fee_dec String,
    fwd_fee String,
    bounce Boolean,
    bounced Boolean,
    value_dec String,
    value String,
    created_lt_dec String,
    created_lt String,
    created_at DateTime
)
ENGINE = MergeTree
ORDER BY (id, src, dst, toStartOfHour(created_at), created_at)
PRIMARY KEY (id, src, dst, toStartOfHour(created_at))
PARTITION BY toYYYYMM(created_at)
SETTINGS index_granularity = 8192


CREATE TABLE default.ton_messages_queue
(
    id String,
    transaction_id String,
    boc String,
    status UInt8,
    msg_type UInt8,
    src String,
    src_workchain_id Int16,
    dst String,
    dst_workchain_id Int16,
    ihr_disabled Boolean,
    ihr_fee_dec String,
    ihr_fee String,
    fwd_fee_dec String,
    fwd_fee String,
    bounce Boolean,
    bounced Boolean,
    value_dec String,
    value String,
    created_lt_dec String,
    created_lt String,
    created_at DateTime
)
ENGINE = Kafka('10.0.0.3:9094', 'gql.messages', 'clickhouse-ton', 'JSONEachRow')
SETTINGS kafka_thread_per_consumer = 2, kafka_num_consumers = 2


CREATE MATERIALIZED VIEW default.ton_messages_mv TO default.ton_messages
(
    id String,
    transaction_id String,
    boc String,
    status UInt8,
    msg_type UInt8,
    src String,
    src_workchain_id Int16,
    dst String,
    dst_workchain_id Int16,
    ihr_disabled Boolean,
    ihr_fee_dec String,
    ihr_fee String,
    fwd_fee_dec String,
    fwd_fee String,
    bounce Boolean,
    bounced Boolean,
    value_dec String,
    value String,
    created_lt_dec String,
    created_lt String,
    created_at DateTime
) AS
SELECT
    *
FROM default.ton_messages_queue


### TRANSACTIONS


CREATE TABLE default.ton_transactions
(
    id String,
    block_id String,
    boc String,
    status UInt8,
    storage_storage_fees_collected_dec String,
    storage_storage_fees_collected String,
    storage_status_change Int8,
    compute_success Boolean,
    compute_msg_state_used Boolean,
    compute_account_activated Boolean,
    compute_gas_fees_dec String,
    compute_gas_fees String,
    compute_gas_used Int32,
    compute_gas_limit Int32,
    compute_mode Int8,
    compute_exit_code Int8,
    compute_vm_steps Int32,
    compute_vm_init_state_hash String,
    compute_vm_final_state_hash String,
    compute_compute_type UInt16,
    action_success Boolean,
    action_valid Boolean,
    action_no_funds Boolean,
    action_status_change Int8,
    action_result_code Int8,
    action_tot_actions Int32,
    action_spec_actions Int32,
    action_skipped_actions Int32,
    action_msgs_created Int32,
    action_action_list_hash String,
    action_tot_msg_size_cells Int32,
    action_tot_msg_size_bits Int32,
    aborted Boolean,
    is_destroyed Boolean,
    tr_type UInt16,
    lt_dec String,
    lt String,
    prev_trans_hash String,
    prev_trans_lt_dec String,
    prev_trans_lt String,
    now DateTime,
    outmsg_cnt Int32,
    orig_status UInt16,
    end_status UInt16,
    out_msgs Array(String),
    account_addr String,
    workchain_id Int16,
    total_fees_dec String,
    total_fees String,
    balance_delta_dec String,
    balance_delta String,
    old_hash String,
    new_hash String,
    created_at_local DateTime64(3)
)
ENGINE = MergeTree
ORDER BY (id, toStartOfHour(now), now)
PRIMARY KEY (id, toStartOfHour(now))
PARTITION BY toYYYYMM(now)
SETTINGS index_granularity = 8192


CREATE TABLE default.ton_transactions_queue
(
    id String,
    block_id String,
    boc String,
    status UInt8,
    storage String,
    compute String,
    action String,
    aborted Boolean,
    destroyed Boolean,
    tr_type UInt16,
    lt_dec String,
    lt String,
    prev_trans_hash String,
    prev_trans_lt_dec String,
    prev_trans_lt String,
    now DateTime,
    outmsg_cnt Int32,
    orig_status UInt16,
    end_status UInt16,
    out_msgs Array(String),
    account_addr String,
    workchain_id Int16,
    total_fees_dec String,
    total_fees String,
    balance_delta_dec String,
    balance_delta String,
    old_hash String,
    new_hash String
)
ENGINE = Kafka('10.0.0.3:9094', 'gql.transactions', 'clickhouse-ton', 'JSONEachRow')
SETTINGS kafka_thread_per_consumer = 2, kafka_num_consumers = 2


CREATE MATERIALIZED VIEW default.ton_transactions_mv TO default.ton_transactions
(
    id String,
    block_id String,
    boc String,
    status UInt8,
    storage_storage_fees_collected_dec String,
    storage_storage_fees_collected String,
    storage_status_change Int8,
    compute_success Boolean,
    compute_msg_state_used Boolean,
    compute_account_activated Boolean,
    compute_gas_fees_dec String,
    compute_gas_fees String,
    compute_gas_used Int32,
    compute_gas_limit Int32,
    compute_mode Int8,
    compute_exit_code Int8,
    compute_vm_steps Int32,
    compute_vm_init_state_hash String,
    compute_vm_final_state_hash String,
    compute_compute_type UInt16,
    action_success Boolean,
    action_valid Boolean,
    action_no_funds Boolean,
    action_status_change Int8,
    action_result_code Int8,
    action_tot_actions Int32,
    action_spec_actions Int32,
    action_skipped_actions Int32,
    action_msgs_created Int32,
    action_action_list_hash String,
    action_tot_msg_size_cells Int32,
    action_tot_msg_size_bits Int32,
    aborted Boolean,
    is_destroyed Boolean,
    tr_type UInt16,
    lt_dec String,
    lt String,
    prev_trans_hash String,
    prev_trans_lt_dec String,
    prev_trans_lt String,
    now DateTime,
    outmsg_cnt Int32,
    orig_status UInt16,
    end_status UInt16,
    out_msgs Array(String),
    account_addr String,
    workchain_id Int16,
    total_fees_dec String,
    total_fees String,
    balance_delta_dec String,
    balance_delta String,
    old_hash String,
    new_hash String,
    created_at_local DateTime64(3)
) AS
SELECT
    id,
    block_id,
    boc,
    status,
    JSONExtractString(storage, 'storage_fees_collected_dec') AS storage_storage_fees_collected_dec,
    JSONExtractString(storage, 'storage_fees_collected') AS storage_storage_fees_collected,
    JSONExtractUInt(storage, 'status_change') AS storage_status_change,
    JSONExtractBool(compute, 'success') AS compute_success,
    JSONExtractBool(compute, 'msg_state_used') AS compute_msg_state_used,
    JSONExtractBool(compute, 'account_activated') AS compute_account_activated,
    JSONExtractString(compute, 'gas_fees_dec') AS compute_gas_fees_dec,
    JSONExtractString(compute, 'gas_fees') AS compute_gas_fees,
    JSONExtractInt(compute, 'gas_used') AS compute_gas_used,
    JSONExtractInt(compute, 'gas_limit') AS compute_gas_limit,
    JSONExtractInt(compute, 'mode') AS compute_mode,
    JSONExtractInt(compute, 'exit_code') AS compute_exit_code,
    JSONExtractInt(compute, 'vm_steps') AS compute_vm_steps,
    JSONExtractString(compute, 'vm_init_state_hash') AS compute_vm_init_state_hash,
    JSONExtractString(compute, 'vm_final_state_hash') AS compute_vm_final_state_hash,
    JSONExtractInt(compute, 'compute_type') AS compute_compute_type,
    JSONExtractBool(action, 'success') AS action_success,
    JSONExtractBool(action, 'valid') AS action_valid,
    JSONExtractBool(action, 'no_funds') AS action_no_funds,
    JSONExtractInt(action, 'status_change') AS action_status_change,
    JSONExtractInt(action, 'result_code') AS action_result_code,
    JSONExtractInt(action, 'tot_actions') AS action_tot_actions,
    JSONExtractInt(action, 'spec_actions') AS action_spec_actions,
    JSONExtractInt(action, 'skipped_actions') AS action_skipped_actions,
    JSONExtractInt(action, 'msgs_created') AS action_msgs_created,
    JSONExtractString(action, 'action_list_hash') AS action_action_list_hash,
    JSONExtractInt(action, 'tot_msg_size_cells') AS action_tot_msg_size_cells,
    JSONExtractInt(action, 'tot_msg_size_bits') AS action_tot_msg_size_bits,
    aborted,
    destroyed as is_destroyed,
    tr_type,
    lt_dec,
    lt,
    prev_trans_hash,
    prev_trans_lt_dec,
    prev_trans_lt,
    now,
    outmsg_cnt,
    orig_status,
    end_status,
    out_msgs,
    account_addr,
    workchain_id,
    total_fees_dec,
    total_fees,
    balance_delta_dec,
    balance_delta,
    old_hash,
    new_hash,
    NOW64() AS created_at_local
FROM default.ton_transactions_queue



### VENOM

## BLOCKS

CREATE TABLE default.venom_dev_blocks
(
    `id` String,
    `file_hash` String,
    `status` UInt8,
    `boc` String,
    `global_id` UInt32,
    `version` UInt16,
    `after_merge` Boolean,
    `before_split` Boolean,
    `after_split` Boolean,
    `want_split` Boolean,
    `want_merge` Boolean,
    `key_block` Boolean,
    `vert_seqno_incr` UInt32,
    `seq_no` UInt32,
    `vert_seq_no` UInt32,
    `gen_utime` DateTime,
    `start_lt_dec` String,
    `start_lt` String,
    `end_lt_dec` String,
    `end_lt` String,
    `gen_validator_list_hash_short` UInt32,
    `gen_catchain_seqno` UInt32,
    `min_ref_mc_seqno` UInt32,
    `prev_key_block_seqno` UInt32,
    `workchain_id` Int8,
    `shard` String,
    `gen_software_version` UInt16,
    `gen_software_capabilities_dec` String,
    `gen_software_capabilities` String,
    `prev_seq_no` UInt32,
    `master_ref_end_lt_dec` String,
    `master_ref_end_lt` String,
    `master_ref_seq_no` UInt32,
    `master_ref_root_hash` String,
    `master_ref_file_hash` String,
    `prev_ref_end_lt_dec` String,
    `prev_ref_end_lt` String,
    `prev_ref_seq_no` UInt32,
    `prev_ref_root_hash` String,
    `prev_ref_file_hash` String,
    `value_flow_from_prev_blk_dec` String,
    `value_flow_from_prev_blk` String,
    `value_flow_to_next_blk_dec` String,
    `value_flow_to_next_blk` String,
    `value_flow_imported_dec` String,
    `value_flow_imported` String,
    `value_flow_exported_dec` String,
    `value_flow_exported` String,
    `value_flow_fees_collected_dec` String,
    `value_flow_fees_collected` String,
    `value_flow_fees_imported_dec` String,
    `value_flow_fees_imported` String,
    `value_flow_recovered_dec` String,
    `value_flow_recovered` String,
    `value_flow_created_dec` String,
    `value_flow_created` String,
    `value_flow_minted_dec` String,
    `value_flow_minted` String,
    `old_hash` String,
    `new_hash` String,
    `old_depth` UInt32,
    `new_depth` UInt32,
    `in_msg_descr` Array(String),
    `out_msg_descr` Array(String),
    `tr_count` UInt16,
    `rand_seed` String,
    `created_by` String,
    `created_at_local` DateTime64(3)
)
ENGINE = MergeTree
ORDER BY (id, toStartOfHour(gen_utime), gen_utime)
PRIMARY KEY (id, toStartOfHour(gen_utime))
PARTITION BY toYYYYMM(gen_utime)
SETTINGS index_granularity = 8192

SET allow_experimental_object_type=1

CREATE TABLE default.venom_dev_blocks_queue
(
    `id` String,
    `file_hash` String,
    `status` UInt8,
    `boc` String,
    `global_id` UInt32,
    `version` UInt16,
    `after_merge` Boolean,
    `before_split` Boolean,
    `after_split` Boolean,
    `want_split` Boolean,
    `want_merge` Boolean,
    `key_block` Boolean,
    `vert_seqno_incr` UInt32,
    `seq_no` UInt32,
    `vert_seq_no` UInt32,
    `gen_utime` DateTime,
    `start_lt_dec` String,
    `start_lt` String,
    `end_lt_dec` String,
    `end_lt` String,
    `gen_validator_list_hash_short` UInt32,
    `gen_catchain_seqno` UInt32,
    `min_ref_mc_seqno` UInt32,
    `prev_key_block_seqno` UInt32,
    `workchain_id` Int8,
    `shard` String,
    `gen_software_version` UInt16,
    `gen_software_capabilities_dec` String,
    `gen_software_capabilities` String,
    `prev_seq_no` UInt32,
    `master_ref` String,
    `prev_ref` String,
    `value_flow` String,
    `old_hash` String,
    `new_hash` String,
    `old_depth` UInt32,
    `new_depth` UInt32,
    `in_msg_descr` Array(String),
    `out_msg_descr` Array(String),
    `tr_count` UInt16,
    `rand_seed` String,
    `created_by` String,
    `created_at_local` DateTime64(3)
)
ENGINE = Kafka('10.0.0.4:9094', 'gql.blocks', 'clickhouse-venom-dev', 'JSONEachRow')
SETTINGS kafka_thread_per_consumer = 2, kafka_num_consumers = 2


CREATE MATERIALIZED VIEW default.venom_dev_blocks_mv TO default.venom_dev_blocks
(
    `id` String,
    `file_hash` String,
    `status` UInt8,
    `boc` String,
    `global_id` UInt32,
    `version` UInt16,
    `after_merge` Boolean,
    `before_split` Boolean,
    `after_split` Boolean,
    `want_split` Boolean,
    `want_merge` Boolean,
    `key_block` Boolean,
    `vert_seqno_incr` UInt32,
    `seq_no` UInt32,
    `vert_seq_no` UInt32,
    `gen_utime` DateTime,
    `start_lt_dec` String,
    `start_lt` String,
    `end_lt_dec` String,
    `end_lt` String,
    `gen_validator_list_hash_short` UInt32,
    `gen_catchain_seqno` UInt32,
    `min_ref_mc_seqno` UInt32,
    `prev_key_block_seqno` UInt32,
    `workchain_id` Int8,
    `shard` String,
    `gen_software_version` UInt16,
    `gen_software_capabilities_dec` String,
    `gen_software_capabilities` String,
    `prev_seq_no` UInt32,
    `master_ref-end_lt_dec` String,
    `master_ref-end_lt` String,
    `master_ref-seq_no` UInt32,
    `master_ref-root_hash` String,
    `master_ref-file_hash` String,
    `prev_ref-end_lt_dec` String,
    `prev_ref-end_lt` String,
    `prev_ref-seq_no` UInt32,
    `prev_ref-root_hash` String,
    `prev_ref-file_hash` String,
    `value_flow-from_prev_blk_dec` String,
    `value_flow-from_prev_blk` String,
    `value_flow-to_next_blk_dec` String,
    `value_flow-to_next_blk` String,
    `value_flow-imported_dec` String,
    `value_flow-imported` String,
    `value_flow-exported_dec` String,
    `value_flow-exported` String,
    `value_flow-fees_collected_dec` String,
    `value_flow-fees_collected` String,
    `value_flow-fees_imported_dec` String,
    `value_flow-fees_imported` String,
    `value_flow-recovered_dec` String,
    `value_flow-recovered` String,
    `value_flow-created_dec` String,
    `value_flow-created` String,
    `value_flow-minted_dec` String,
    `value_flow-minted` String,
    `old_hash` String,
    `new_hash` String,
    `old_depth` UInt32,
    `new_depth` UInt32,
    `in_msg_descr` Array(String),
    `out_msg_descr` Array(String),
    `tr_count` UInt16,
    `rand_seed` String,
    `created_by` String,
    `created_at_local` DateTime64(3)
) AS
SELECT
    id,
    file_hash,
    status,
    boc,
    global_id,
    version,
    after_merge,
    before_split,
    after_split,
    want_split,
    want_merge,
    key_block,
    vert_seqno_incr,
    seq_no,
    vert_seq_no,
    gen_utime,
    start_lt_dec,
    start_lt,
    end_lt_dec,
    end_lt,
    gen_validator_list_hash_short,
    gen_catchain_seqno,
    min_ref_mc_seqno,
    prev_key_block_seqno,
    workchain_id,
    shard,
    gen_software_version,
    gen_software_capabilities_dec,
    gen_software_capabilities,
    prev_seq_no,
    JSONExtractString(master_ref, 'end_lt_dec') AS master_ref_end_lt_dec,
    JSONExtractString(master_ref, 'end_lt') AS master_ref_end_lt,
    JSONExtractUInt(master_ref, 'seq_no') AS master_ref_seq_no,
    JSONExtractString(master_ref, 'root_hash') AS master_ref_root_hash,
    JSONExtractString(master_ref, 'file_hash') AS master_ref_file_hash,
    JSONExtractString(prev_ref, 'end_lt_dec') AS prev_ref_end_lt_dec,
    JSONExtractString(prev_ref, 'end_lt') AS prev_ref_end_lt,
    JSONExtractUInt(prev_ref, 'seq_no') AS prev_ref_seq_no,
    JSONExtractString(prev_ref, 'root_hash') AS prev_ref_root_hash,
    JSONExtractString(prev_ref, 'file_hash') AS prev_ref_file_hash,
    JSONExtractString(value_flow, 'from_prev_blk_dec') AS value_flow_from_prev_blk_dec,
    JSONExtractString(value_flow, 'from_prev_blk') AS value_flow_from_prev_blk,
    JSONExtractString(value_flow, 'to_next_blk_dec') AS value_flow_to_next_blk_dec,
    JSONExtractString(value_flow, 'to_next_blk') AS value_flow_to_next_blk,
    JSONExtractString(value_flow, 'imported_dec') AS value_flow_imported_dec,
    JSONExtractString(value_flow, 'imported') AS value_flow_imported,
    JSONExtractString(value_flow, 'exported_dec') AS value_flow_exported_dec,
    JSONExtractString(value_flow, 'exported') AS value_flow_exported,
    JSONExtractString(value_flow, 'fees_collected_dec') AS value_flow_fees_collected_dec,
    JSONExtractString(value_flow, 'fees_collected') AS value_flow_fees_collected,
    JSONExtractString(value_flow, 'fees_imported_dec') AS value_flow_fees_imported_dec,
    JSONExtractString(value_flow, 'fees_imported') AS value_flow_fees_imported,
    JSONExtractString(value_flow, 'recovered_dec') AS value_flow_recovered_dec,
    JSONExtractString(value_flow, 'recovered') AS value_flow_recovered,
    JSONExtractString(value_flow, 'created_dec') AS value_flow_created_dec,
    JSONExtractString(value_flow, 'created') AS value_flow_created,
    JSONExtractString(value_flow, 'minted_dec') AS value_flow_minted_dec,
    JSONExtractString(value_flow, 'minted') AS value_flow_minted,
    old_hash,
    new_hash,
    old_depth,
    new_depth,
    in_msg_descr,
    out_msg_descr,
    tr_count,
    rand_seed,
    created_by,
    NOW64() AS created_at_local
FROM default.venom_dev_blocks_queue

### ACCOUNTS

CREATE TABLE default.venom_dev_accounts
(
    id String,
    workchain_id Int32,
    boc String,
    last_paid Int64,
    bits_dec String,
    bits String,
    cells_dec String,
    cells String,
    public_cells_dec String,
    public_cells String,
    last_trans_lt_dec String,
    last_trans_lt String,
    balance_dec String,
    balance String,
    tick Boolean,
    tock Boolean,
    code String,
    code_hash String,
    data String,
    data_hash String,
    library String,
    library_hash String,
    acc_type Int32,
    created_at_local DateTime64(3)
)
ENGINE = MergeTree
ORDER BY (id, toStartOfHour(created_at_local))
PRIMARY KEY (id, toStartOfHour(created_at_local))
PARTITION BY toYYYYMM(created_at_local)
SETTINGS index_granularity = 8192


CREATE TABLE default.venom_dev_accounts_queue
(
    id String,
    workchain_id Int32,
    boc String,
    last_paid Int64,
    bits_dec String,
    bits String,
    cells_dec String,
    cells String,
    public_cells_dec String,
    public_cells String,
    last_trans_lt_dec String,
    last_trans_lt String,
    balance_dec String,
    balance String,
    tick Boolean,
    tock Boolean,
    code String,
    code_hash String,
    data String,
    data_hash String,
    library String,
    library_hash String,
    acc_type Int32
)
ENGINE = Kafka('10.0.0.4:9094', 'gql.accounts', 'clickhouse-venom-dev', 'JSONEachRow')
SETTINGS kafka_thread_per_consumer = 2, kafka_num_consumers = 2


CREATE MATERIALIZED VIEW default.venom_dev_accounts_mv TO default.venom_dev_accounts
(
    id String,
    workchain_id Int32,
    boc String,
    last_paid Int64,
    bits_dec String,
    bits String,
    cells_dec String,
    cells String,
    public_cells_dec String,
    public_cells String,
    last_trans_lt_dec String,
    last_trans_lt String,
    balance_dec String,
    balance String,
    tick Boolean,
    tock Boolean,
    code String,
    code_hash String,
    data String,
    data_hash String,
    library String,
    library_hash String,
    acc_type Int32,
    created_at_local DateTime64(3)
) AS
SELECT
    *,
    NOW64() AS created_at_local
FROM default.venom_dev_accounts_queue


### Messages
CREATE TABLE default.venom_dev_messages
(
    id String,
    transaction_id String,
    boc String,
    status UInt8,
    msg_type UInt8,
    src String,
    src_workchain_id Int16,
    dst String,
    dst_workchain_id Int16,
    ihr_disabled Boolean,
    ihr_fee_dec String,
    ihr_fee String,
    fwd_fee_dec String,
    fwd_fee String,
    bounce Boolean,
    bounced Boolean,
    value_dec String,
    value String,
    created_lt_dec String,
    created_lt String,
    created_at DateTime
)
ENGINE = MergeTree
ORDER BY (id, src, dst, toStartOfHour(created_at), created_at)
PRIMARY KEY (id, src, dst, toStartOfHour(created_at))
PARTITION BY toYYYYMM(created_at)
SETTINGS index_granularity = 8192


CREATE TABLE default.venom_dev_messages_queue
(
    id String,
    transaction_id String,
    boc String,
    status UInt8,
    msg_type UInt8,
    src String,
    src_workchain_id Int16,
    dst String,
    dst_workchain_id Int16,
    ihr_disabled Boolean,
    ihr_fee_dec String,
    ihr_fee String,
    fwd_fee_dec String,
    fwd_fee String,
    bounce Boolean,
    bounced Boolean,
    value_dec String,
    value String,
    created_lt_dec String,
    created_lt String,
    created_at DateTime
)
ENGINE = Kafka('10.0.0.4:9094', 'gql.messages', 'clickhouse-venom-dev', 'JSONEachRow')
SETTINGS kafka_thread_per_consumer = 2, kafka_num_consumers = 2


CREATE MATERIALIZED VIEW default.venom_dev_messages_mv TO default.venom_dev_messages
(
    id String,
    transaction_id String,
    boc String,
    status UInt8,
    msg_type UInt8,
    src String,
    src_workchain_id Int16,
    dst String,
    dst_workchain_id Int16,
    ihr_disabled Boolean,
    ihr_fee_dec String,
    ihr_fee String,
    fwd_fee_dec String,
    fwd_fee String,
    bounce Boolean,
    bounced Boolean,
    value_dec String,
    value String,
    created_lt_dec String,
    created_lt String,
    created_at DateTime
) AS
SELECT
    *
FROM default.venom_dev_messages_queue


### TRANSACTIONS


CREATE TABLE default.venom_dev_transactions
(
    id String,
    block_id String,
    boc String,
    status UInt8,
    storage_storage_fees_collected_dec String,
    storage_storage_fees_collected String,
    storage_status_change Int8,
    compute_success Boolean,
    compute_msg_state_used Boolean,
    compute_account_activated Boolean,
    compute_gas_fees_dec String,
    compute_gas_fees String,
    compute_gas_used Int32,
    compute_gas_limit Int32,
    compute_mode Int8,
    compute_exit_code Int8,
    compute_vm_steps Int32,
    compute_vm_init_state_hash String,
    compute_vm_final_state_hash String,
    compute_compute_type UInt16,
    action_success Boolean,
    action_valid Boolean,
    action_no_funds Boolean,
    action_status_change Int8,
    action_result_code Int8,
    action_tot_actions Int32,
    action_spec_actions Int32,
    action_skipped_actions Int32,
    action_msgs_created Int32,
    action_action_list_hash String,
    action_tot_msg_size_cells Int32,
    action_tot_msg_size_bits Int32,
    aborted Boolean,
    is_destroyed Boolean,
    tr_type UInt16,
    lt_dec String,
    lt String,
    prev_trans_hash String,
    prev_trans_lt_dec String,
    prev_trans_lt String,
    now DateTime,
    outmsg_cnt Int32,
    orig_status UInt16,
    end_status UInt16,
    out_msgs Array(String),
    account_addr String,
    workchain_id Int16,
    total_fees_dec String,
    total_fees String,
    balance_delta_dec String,
    balance_delta String,
    old_hash String,
    new_hash String,
    created_at_local DateTime64(3)
)
ENGINE = MergeTree
ORDER BY (id, toStartOfHour(now), now)
PRIMARY KEY (id, toStartOfHour(now))
PARTITION BY toYYYYMM(now)
SETTINGS index_granularity = 8192


CREATE TABLE default.venom_dev_transactions_queue
(
    id String,
    block_id String,
    boc String,
    status UInt8,
    storage String,
    compute String,
    action String,
    aborted Boolean,
    destroyed Boolean,
    tr_type UInt16,
    lt_dec String,
    lt String,
    prev_trans_hash String,
    prev_trans_lt_dec String,
    prev_trans_lt String,
    now DateTime,
    outmsg_cnt Int32,
    orig_status UInt16,
    end_status UInt16,
    out_msgs Array(String),
    account_addr String,
    workchain_id Int16,
    total_fees_dec String,
    total_fees String,
    balance_delta_dec String,
    balance_delta String,
    old_hash String,
    new_hash String
)
ENGINE = Kafka('10.0.0.4:9094', 'gql.transactions', 'clickhouse-venom-dev', 'JSONEachRow')
SETTINGS kafka_thread_per_consumer = 2, kafka_num_consumers = 2


CREATE MATERIALIZED VIEW default.venom_dev_transactions_mv TO default.venom_dev_transactions
(
    id String,
    block_id String,
    boc String,
    status UInt8,
    storage_storage_fees_collected_dec String,
    storage_storage_fees_collected String,
    storage_status_change Int8,
    compute_success Boolean,
    compute_msg_state_used Boolean,
    compute_account_activated Boolean,
    compute_gas_fees_dec String,
    compute_gas_fees String,
    compute_gas_used Int32,
    compute_gas_limit Int32,
    compute_mode Int8,
    compute_exit_code Int8,
    compute_vm_steps Int32,
    compute_vm_init_state_hash String,
    compute_vm_final_state_hash String,
    compute_compute_type UInt16,
    action_success Boolean,
    action_valid Boolean,
    action_no_funds Boolean,
    action_status_change Int8,
    action_result_code Int8,
    action_tot_actions Int32,
    action_spec_actions Int32,
    action_skipped_actions Int32,
    action_msgs_created Int32,
    action_action_list_hash String,
    action_tot_msg_size_cells Int32,
    action_tot_msg_size_bits Int32,
    aborted Boolean,
    is_destroyed Boolean,
    tr_type UInt16,
    lt_dec String,
    lt String,
    prev_trans_hash String,
    prev_trans_lt_dec String,
    prev_trans_lt String,
    now DateTime,
    outmsg_cnt Int32,
    orig_status UInt16,
    end_status UInt16,
    out_msgs Array(String),
    account_addr String,
    workchain_id Int16,
    total_fees_dec String,
    total_fees String,
    balance_delta_dec String,
    balance_delta String,
    old_hash String,
    new_hash String,
    created_at_local DateTime64(3)
) AS
SELECT
    id,
    block_id,
    boc,
    status,
    JSONExtractString(storage, 'storage_fees_collected_dec') AS storage_storage_fees_collected_dec,
    JSONExtractString(storage, 'storage_fees_collected') AS storage_storage_fees_collected,
    JSONExtractUInt(storage, 'status_change') AS storage_status_change,
    JSONExtractBool(compute, 'success') AS compute_success,
    JSONExtractBool(compute, 'msg_state_used') AS compute_msg_state_used,
    JSONExtractBool(compute, 'account_activated') AS compute_account_activated,
    JSONExtractString(compute, 'gas_fees_dec') AS compute_gas_fees_dec,
    JSONExtractString(compute, 'gas_fees') AS compute_gas_fees,
    JSONExtractInt(compute, 'gas_used') AS compute_gas_used,
    JSONExtractInt(compute, 'gas_limit') AS compute_gas_limit,
    JSONExtractInt(compute, 'mode') AS compute_mode,
    JSONExtractInt(compute, 'exit_code') AS compute_exit_code,
    JSONExtractInt(compute, 'vm_steps') AS compute_vm_steps,
    JSONExtractString(compute, 'vm_init_state_hash') AS compute_vm_init_state_hash,
    JSONExtractString(compute, 'vm_final_state_hash') AS compute_vm_final_state_hash,
    JSONExtractInt(compute, 'compute_type') AS compute_compute_type,
    JSONExtractBool(action, 'success') AS action_success,
    JSONExtractBool(action, 'valid') AS action_valid,
    JSONExtractBool(action, 'no_funds') AS action_no_funds,
    JSONExtractInt(action, 'status_change') AS action_status_change,
    JSONExtractInt(action, 'result_code') AS action_result_code,
    JSONExtractInt(action, 'tot_actions') AS action_tot_actions,
    JSONExtractInt(action, 'spec_actions') AS action_spec_actions,
    JSONExtractInt(action, 'skipped_actions') AS action_skipped_actions,
    JSONExtractInt(action, 'msgs_created') AS action_msgs_created,
    JSONExtractString(action, 'action_list_hash') AS action_action_list_hash,
    JSONExtractInt(action, 'tot_msg_size_cells') AS action_tot_msg_size_cells,
    JSONExtractInt(action, 'tot_msg_size_bits') AS action_tot_msg_size_bits,
    aborted,
    destroyed as is_destroyed,
    tr_type,
    lt_dec,
    lt,
    prev_trans_hash,
    prev_trans_lt_dec,
    prev_trans_lt,
    now,
    outmsg_cnt,
    orig_status,
    end_status,
    out_msgs,
    account_addr,
    workchain_id,
    total_fees_dec,
    total_fees,
    balance_delta_dec,
    balance_delta,
    old_hash,
    new_hash,
    NOW64() AS created_at_local
FROM default.venom_dev_transactions_queue
